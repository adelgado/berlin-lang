def(assert require("assert"))
def(_ require("lodash"))
def(core require("../core"))

def(= .-=(core))
def(zero? .-zero?(core))
def(empty? .-empty?(core))
def(first .-first(core))
def(rest .-rest(core))
def(cons .-cons(core))
def(+ .-+(core))
def(- .--(core))
def(* .-*(core))
def(/ .-/(core))
def(% .-%(core))
def(inc .-inc(core))

describe("core" fn(~{
  describe("=" fn(~{
    it("returns true for equal things" fn(~{
      .equal(assert =(1 1) true)
    }))

    it("returns false for unequal things" fn(~{
      .equal(assert =(1 2) false)
    }))
  }))

  describe("zero?" fn(~{
    it("returns true for 0" fn(~{
      .equal(assert zero?(0) true)
    }))

    it("returns false for non-0" fn(~{
      .equal(assert zero?(1) false)
    }))
  }))

  describe("empty?" fn(~{
    it("returns true for empty arrays" fn(~{
      .equal(assert empty?([]) true)
    }))

    it("returns false for non-empty arrays" fn(~{
      .equal(assert empty?([1]) false)
    }))
  }))

  describe("first" fn(~{
    it("returns the first element in an array" fn(~{
      .equal(assert first([1 2 3]) 1)
    }))
  }))

  describe("rest" fn(~{
    it("returns all but the first element in an array" fn(~{
      assert(.isEqual(_ rest([1 2 3]) [2 3]))
    }))
  }))

  describe("cons" fn(~{
    it("constructs a new array with the given element at the beginning" fn(~{
      assert(.isEqual(_ cons(1 [2 3]) [1 2 3]))
    }))
  }))

  describe("+" fn(~{
    it("adds two given numbers" fn(~{
      .equal(assert +(1 2) 3)
    }))

    it("works for negative numbers, too" fn(~{
      .equal(assert +(-1 -2) -3)
    }))
  }))

  describe("-" fn(~{
    it("subtracts two given numbers" fn(~{
      .equal(assert -(1 2) -1)
    }))

    it("works for negative numbers, too" fn(~{
      .equal(assert -(-1 -2) 1)
    }))
  }))

  describe("*" fn(~{
    it("multiplies two given numbers" fn(~{
      .equal(assert *(1 2) 2)
    }))

    it("works for negative numbers, too" fn(~{
      .equal(assert *(-1 -2) 2)
    }))
  }))

  describe("/" fn(~{
    it("divides two given numbers" fn(~{
      .equal(assert /(1 2) 0.5)
    }))

    it("works for negative numbers, too" fn(~{
      .equal(assert /(-1 -2) 0.5)
    }))
  }))

  describe("%" fn(~{
    it("calculates the modulo" fn(~{
      .equal(assert %(6 4) 2)
    }))

    it("works for negative numbers, too" fn(~{
      .equal(assert %(-6 -4) -2)
    }))
  }))

  describe("inc" fn(~{
    it("adds one to the given number" fn(~{
      .equal(assert inc(5) 6)
    }))

    it("works with a negative number, too" fn(~{
      .equal(assert inc(-5) -4)
    }))
  }))
}))
